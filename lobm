#!/usr/bin/env perl

################################################################################
#                                                                              #
# lobm - Linux OS Baseline Maker                                               #
#                                                                              #
# This tool will create a new YUM repository using the latest packages up to a #
# certain date. The source packages are read from a local filesystem.          #
#                                                                              #
# It is written in Perl, but requires the createrepo script (which is written  #
# in Python).                                                                  #
#                                                                              #
#          see https://github.com/Q-Technologies/lobm for full details         #
#                                                                              #
#                                                                              #
# Copyright 2013-2015 - Q-Technologies (http://www.Q-Technologies.com.au       #
#                                                                              #
#                                                                              #
# Revision History                                                             #
#                                                                              #
#    Aug 2013 - Initial version - support native zypper repos only             #
#    Feb 2014 - Changed to create YUM repos, but only tested for SuSE RPMs     #
#    Apr 2015 - Updated to correctly sort Red Hat RPMs                         #
#                                                                              #
# Issues                                                                       #
#    Only builds x64 repos at this stage                                       #
#    Only uses the file modification date to determine cutoff, it could use    #
#        the RPM build date instead.                                           #
#    Better validation of inputs from the YAML files is required               #
#                                                                              #
################################################################################

use strict;
use lib "/usr/local/perl/lib/perl5","/usr/local/perl/lib/perl5/x86_64-linux-thread-multi";
use Getopt::Std;
use Time::Local;
use Data::Dumper;
use File::Path qw(make_path remove_tree);
use File::Find;
use File::Basename;
use YAML qw'LoadFile';

# Specifiy the name of the main config file
my $mainconf = "lobm.yaml";
my($filename, $dirname, $suffix) = fileparse($0);

# The Help/Usage message
my $usage_msg = <<USAGE;

$0 -c /path/to/config.yaml

\t\t-h this help message
\t\t-v display messages describing what is happening
\t\t-c full path to the configuration file for the baseline
\t\t-r force running as root (should not be necessary normally)

\tThe baseline configuration file needs to be in YAML format with
\tthe following fields:

name: baseline_name
description: A more verbose description
target: platform
os_release: 6.5
versions: 1 # number of versions of each package to put in new repository
rpm_dirs:
  -
    dir: /path/to/first/dir/of/RPMs
    date: YYYY-MM-DD  # Date to select RPMs up to
  -
    dir: /path/to/second/dir/of/RPMs
    date: YYYY-MM-DD  # Date to select RPMs up to
include:
  - excluded_package_1  # excludes all others ('exclude' is effectively ignored)
exclude:
  - excluded_package_1
  - excluded_package_2

\tThe the main configuration file is found in this order:

\t\t\/etc/lobm/$mainconf, or
\t\t\$INSTALL_ROOT/etc/$mainconf, or
\t\t./$mainconf

\tIt requires content along the following lines:

baseline_dir: "/software/repos/baselines/" # Place on disk for new repositories
http_served_from: "/software"              # i.e. the DocumentRoot
http_server_name: "install.example.com"    # repository accessible by server name 
http_server_proto: "http"                  # repository available over protocal
createrepo_cmd: "/usr/bin/createrepo"      # path to createrepo script
workers: 2                                 # number of workers to use for the 
                                           #     createrepo (if not specified then
                                           #     then workers will equal cpu threads.

USAGE

# Process command line options
our $opt_c; # Baseline Configuration files
our $opt_h; # Help
our $opt_v; # Verbose
our $opt_r; # Run as root

getopts('c:hvr');

if( $opt_h or ! $opt_c ){
        print $usage_msg;
        exit;
}

if( ! $opt_c ){
        fatal( "The path to the baseline configuration is required.\n".$usage_msg);
}

if( ! -r $opt_c or ! -f $opt_c ){
        fatal( "The baseline configuration file is not readable.\n".$usage_msg);
}

# Check who we are running as - root is not required if permissions are configured correctly
# for the running user
if( $> == 0 and ! $opt_r ){
    print STDERR "Error: Not permitted to run as root (over-ride with -r)";
    exit 1
}



# Look for the Main config file
if( -r "/etc/lobm/" . $mainconf ){
    $mainconf = "/etc/lobm/" . $mainconf;
} elsif( -r ".." . "/etc/" . $mainconf ){
    $mainconf = ".." . "/etc/" . $mainconf;
} elsif( -r "." . "/" . $mainconf ){
    $mainconf = "." . "/" . $mainconf;
} else {
    print STDERR "Error: Master config file cannot be found\n";
    exit 1;
}
my $mainconf = LoadFile($mainconf);
#print Dumper( $mainconf );
my $workers = $mainconf->{workers};
chomp( $workers = `grep -c vendor_id /proc/cpuinfo` ) if ! $workers; # Match workers to the numbers of CPUs/threads
my $http_server_name = $mainconf->{http_server_name};
chomp( $http_server_name = `hostname` ) if ! $http_server_name;
my $http_server_proto = $mainconf->{http_server_proto};



# Load the baseline configuration file
my $bl_conf = LoadFile($opt_c);
my $max_versions = $bl_conf->{'versions'};
$max_versions = 1 if ! $max_versions;
my $target = $bl_conf->{'target'};
my $os_release = $bl_conf->{'os_release'};
my $exclude = $bl_conf->{'exclude'};
my $include = $bl_conf->{'include'};
# Create the destination baseline directory
$mainconf->{baseline_dir} = $mainconf->{baseline_dir} . $bl_conf->{'name'};
remove_tree( $mainconf->{baseline_dir} );
if( ! -d $mainconf->{baseline_dir} ){
        if( ! make_path( $mainconf->{baseline_dir}."/RPMS/noarch", $mainconf->{baseline_dir}."/RPMS/x86_64", {mode=>0755}) ){
                fatal( "Could not create $mainconf->{baseline_dir}: $!" );
        }
        #print "Successfully created ", $mainconf->{baseline_dir}, "\n";
}
if( ! -w $mainconf->{baseline_dir} ){
        fatal( "Cannot write to $mainconf->{baseline_dir}: $!" );
}



# find the source RPMs
my $rpm_dirs = $bl_conf->{'rpm_dirs'};
my @rpm_list;
print "Finding the RPMs and setting up sym links\n" if $opt_v;
for my $rpm_dir ( @$rpm_dirs ){
        my $date = $rpm_dir->{'date'};
        my $dir = $rpm_dir->{'dir'};
        my( $year, $mon, $mday ) = split( /-/, $date );
        my $reftime = timelocal(59,59,23,$mday,$mon - 1,$year);
        #print "$date $year, $mon, $mday $dir\n";
        print "\tUsing RPMs in $dir up till date: $date\n" if $opt_v;
        opendir DIR, $dir or die $!;
        #my @rpms = grep !/\.drpm$/, readdir( DIR );
        #my @rpms = grep /\.rpm$/, readdir( DIR );
        my @rpms;
        find( sub {/^.*\.rpm\z/s && push @rpms, $File::Find::name}, $dir );
        closedir DIR;
        OUTER: for my $rpm (@rpms ){
                #next unless $rpm =~ /avahi-ui/;
                next if( $rpm =~ /(\.src\.|\/boot\/|\.i\d86\.|\.drpm$|\.delta\.rpm$)/ );
                my $mtime = (stat($rpm))[9];
                        #print $rpm, "\n";
                if( $reftime > $mtime ){
                        #print $mtime, " - $reftime\n";
                        my @arr = split( /-/, $rpm );
                        my $minor = pop @arr;
                        my $major = pop @arr;
                        my $pkg = join("-", @arr);
                        @arr = split( /\./, $minor );
                        my $ext = pop @arr;
                        pop @arr if $minor =~ /\.update\./;
                        my $arch = pop @arr;
                        #pop @arr if $minor =~ /\.el\d\./;
                        my $minor = join(".", @arr);
                        #print "$pkg : $major : $minor : $dir/$rpm\n";
                        my @tmp = ( basename($pkg), $major, $minor, $arch, $ext, $rpm );
                        # Include only applies if include array is populated
                        my $included = 0;
                        for my $incl ( @$include ){
                            #print "$incl eq ".basename($pkg)."\n";
                            $included = 1 and last if $incl eq basename($pkg);
                        }
                        next OUTER if( (not $included) and @$include > 0 );
                        for my $excl ( @$exclude ){
                            next OUTER if $excl eq basename($pkg);
                        }
                        push @rpm_list, \@tmp;
                }
        }
}

#print Dumper( @rpm_list );

my $strip_words;
$strip_words = 1 if( $target =~ /red.*hat|centos|rhel/i );

# Sort minor number first - reverse
#@rpm_list = sort { versioncmp($b->[2], $a->[2] ) } @rpm_list;
@rpm_list = sort { versioncmp($b->[2], $a->[2], $strip_words) } @rpm_list;

# Sort major number next - reverse
#@rpm_list = sort { versioncmp($b->[1], $a->[1] ) } @rpm_list;
@rpm_list = sort { versioncmp($b->[1], $a->[1]) } @rpm_list;

# Sort name last
@rpm_list = sort { $a->[0] cmp $b->[0] } @rpm_list;
#print Dumper( @rpm_list );

my ( $last_rpm, $last_maj, $last_min, $version );
for my $ar ( @rpm_list ){
    if( $last_rpm ne $ar->[0] ){
        # reset versions counter
        $version = 1;
    }
    if( $version <= $max_versions ){
        # Construct the new filename
        my $newfile = $mainconf->{baseline_dir}."/RPMS/".$ar->[3]."/".$ar->[0]."-".$ar->[1]."-".$ar->[2].".".$ar->[3].".".$ar->[4];
        
        # For Red Hat we can stay on a release if specified in the config file - skip release rpm if wrong version
        # If it is not specified, will default to latest release
        next if( $ar->[2] !~ /^$os_release/ and $ar->[0] eq "redhat-release-server" );
        
        # Create the symbolic link, but skip if already exists - same rpm may have come from 2 sources
        #print $ar->[0], " ", $ar->[1], " ", $ar->[2], " ", $ar->[5], "\n";
        next if -e $newfile;
        if( ! symlink( $ar->[5], $newfile ) ){
            fatal( "Cannot symbolic link, maybe RPM name does not follow convention: $!" );
        }
    }
    #print $ar->[0], " ", $last_maj, " ", $ar->[1], " ", $last_min, " ", $ar->[2], "\n" if $last_maj ne $ar->[1] and $last_rpm eq $ar->[0];
    $last_rpm = $ar->[0];
    $last_maj = $ar->[1];
    $last_min = $ar->[2];
    $version++;
}

# Create the repository
print "Creating the repository in $mainconf->{baseline_dir}\n" if $opt_v;
if( -x $mainconf->{createrepo_cmd} ){
    my $output;
    $output = `$mainconf->{createrepo_cmd} --workers=$workers $mainconf->{baseline_dir} 2>&1`;
    my $rc = $? >> 8;
    #print $rc . ":- " . $output;
    if( $rc ){
        print STDERR "The createrepo command failed with the following error:\n$output";
        exit 1;
    }
} else {
    print "\nError: $mainconf->{createrepo_cmd} command could not be executed!\n";
    exit 1;
}

my $url = "/" . $mainconf->{baseline_dir};
my $ss = $mainconf->{http_served_from};
for( $url ){
    s/$ss//;
    s/\/+/\//;
}
my $name = basename($url);
if( $target =~ /sles|suse/i ){
    print "\nUse this command to add the repository to client machines:\n\n";
    print "\tzypper ar -f -c -G $http_server_proto://$http_server_name$url ".$name."\n\n";
} elsif( $target =~ /red.*hat|centos|rhel/i ){
    print "Create '/etc/yum.repos.d/".$name.".repo' on each client with this content:\n";
    (my $filecontent = qq{
        [$name]
        name=$bl_conf->{'description'}
        baseurl=$http_server_proto://$http_server_name$url
        enabled=1
        gpgcheck=0
        sslverify=0
        }) =~ s/^ {8}//mg;
    print $filecontent;
} else {
    print "\tUnknown Target! Unknown command!\n\n";
}

####################### End of Main ############################################







################################################################################
#                                                                              #
# Function to provide consistance fatal error handling                         #
#                                                                              #
################################################################################
sub fatal {
        my $msg = shift;
        print STDERR "Error: ", $msg, "\n";
        exit 1;
}



################################################################################
#                                                                              #
# Function to intelligently find which rpm has the higher version              #
#                                                                              #
################################################################################
sub versioncmp( $$ ) {
    #print $_[0] . " <=> " . $_[1] . "\n";
    my @A = split( /\./, $_[0] );
    my @B = split( /\./, $_[1] );
    my $strip_words = $_[2];
    if( $strip_words ){
        strip_words( \@A );
        strip_words( \@B );
    }

    # Make the arrays the same size
    my $diff = @A - @B;
    my @tmp;
    for( my $i=0; $i <= abs($diff); $i++ ){
        push @tmp, "0";
    }
    if( $diff > 0 ){
        push @B, @tmp;
    } elsif( $diff < 0 ) {
        push @A, @tmp;
    }

    my ($A, $B);
    while (@A and @B) {
	    $A = shift @A;
	    $B = shift @B;
        #print $A . " <=> " . $B . "\n";
	    if ($A =~ /^\d+$/ and $B =~ /^\d+$/) {
	        if ($A =~ /^0/ || $B =~ /^0/) {
		        return $A cmp $B if $A cmp $B;
	        } else {
		        return $A <=> $B if $A <=> $B;
	        }
	    } else {
	        $A = uc $A;
	        $B = uc $B;
	        return $A cmp $B if $A cmp $B;
	    }	
    }
    @A <=> @B;
}



################################################################################
#                                                                              #
# Function to strip extra words in the version strings for Centos and Red Hat  # 
#                                                                              #
################################################################################
sub strip_words {
    my $ref = shift;
    my $i = 0;
    for my $new ( @$ref ){
        if( $new =~ /el\d_*|centos/ ){
            $new =~ s/el\d_*|centos//g;
            $new = 0 if ! $new;
            splice(@$ref,$i,1, ( $new ));
        }
        $i++;
    }
}
