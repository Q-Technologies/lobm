#!/usr/bin/env perl

################################################################################
#                                                                              #
# lobm - Linux OS Baseline Maker                                               #
#                                                                              #
# This tool will create a new YUM repository using the latest packages up to a #
# certain date. The source packages are read from a local filesystem.          #
#                                                                              #
# It is written in Perl, but requires the createrepo script (which is written  #
# in Python).                                                                  #
#                                                                              #
#          see https://github.com/Q-Technologies/lobm for full details         #
#                                                                              #
#                                                                              #
# Copyright 2013-2018 - Q-Technologies (http://www.Q-Technologies.com.au       #
#                                                                              #
# Issues                                                                       #
#    Only uses the file modification date to determine cutoff, it could use    #
#        the RPM build date instead.                                           #
#    Better validation of inputs from the YAML files is required               #
#                                                                              #
################################################################################

use strict;
use Getopt::Std;
use Time::Local;
use Data::Dumper;
use File::Path qw(make_path remove_tree);
use File::Find;
use File::Basename;
use YAML::XS qw(LoadFile Dump);
use POSIX 'strftime';
use lib '/code/perl/00-modules-mine';
use Log::MixedColor;
use 5.10.0;

use constant DEBUG_MSG => "debug";
use constant ERROR_MSG => "error";

my $date_format = qr/\d{4,4}-\d\d-\d\d/;

my $log = Log::MixedColor->new;

# Specifiy the name of the main config file
my $mainconf = "lobm.yaml";
my($filename, $dirname, $suffix) = fileparse($0);

# The Help/Usage message
my $usage_msg = <<USAGE;

$0 -c /path/to/config.yaml

\t\t-h this help message
\t\t-v display messages describing what is happening
\t\t-d display debug messages
\t\t-i include 32bit RPMs that normally ship in 64bit distros
\t\t-c full path to the configuration file for the baseline
\t\t-g GPG key to use to sign the repository (no signing if omitted)
\t\t-r force running as root (should not be necessary normally)
\t\t-o override date with specified value. Use an existing file, all instances
\t\t     of a date (YYYY-MM-DD) will be replaced with an override.  This is
\t\t     when you want to periodically automatically create a baseline using
\t\t     an existing configuration file.

\tThe baseline configuration file needs to be in YAML format with
\tthe following fields:

---
name: baseline_name # Required
description: A more verbose description # Optional
target: platform # Required
os_release: 6.5 # Optional, forces EL to a specific release (within reason)
versions: 1 # Optional, number of versions of each package to put in new repository
type: yum # Optional, zypper or yum, defaults to yum
rpm_dirs: # Required
  -
    dir: /path/to/first/dir/of/RPMs
    date: YYYY-MM-DD  # Date to select RPMs up to
  -
    dir: /path/to/second/dir/of/RPMs
    date: YYYY-MM-DD  # Date to select RPMs up to
include: # excludes all others ('exclude' is effectively ignored)
  - excluded_package_1  
exclude: # packages to exclude from the repo
  - excluded_package_1
  - excluded_package_2

\tThe the main configuration file is found in this order:

\t\t\/etc/lobm/$mainconf, or
\t\t\$INSTALL_ROOT/etc/$mainconf, or
\t\t./$mainconf

\tIt requires content along the following lines:

baseline_dir: "/software/repos/baselines/"          # Place on disk for new repositories
http_served_from: "/software"                       # i.e. the DocumentRoot
http_server_uri: "https://install.example.com/repo" # repository accessible by URI
createrepo_cmd: "/usr/bin/createrepo"               # path to createrepo script
workers: 2                                          # number of workers to use for the
                                                    # createrepo (if not specified then
                                                    # then workers will equal cpu threads)

USAGE

# Process command line options
our $opt_c; # Baseline Configuration files
our $opt_h; # Help
our $opt_v; # Verbose
our $opt_d; # Debug
our $opt_g; # GPG key name
our $opt_r; # Run as root
our $opt_o; # Override the date
our $opt_i; # Include 32bit RPMs

getopts('c:hvrg:do:i');

if( $opt_h or ! $opt_c ){
        print $usage_msg;
        exit;
}
my $exclude_32bit = not $opt_i;

if( ! $opt_c ){
        $log->fatal_err( "The path to the baseline configuration is required.\n".$usage_msg);
}

if( ! -r $opt_c or ! -f $opt_c ){
        $log->fatal_err( "The baseline configuration file is not readable.\n".$usage_msg);
}

# Check who we are running as - root is not required if permissions are configured correctly
# for the running user
if( $> == 0 and ! $opt_r ){
    print STDERR "Error: Not permitted to run as root (over-ride with -r)";
    exit 1;
}

# Check format of override date
if( $opt_o and $opt_o !~ /^$date_format$/ ){
    print STDERR "Error: the override date must be in YYYY-MM-DD format!";
    exit 1;
}

my $gpg_key;
$gpg_key = "'$opt_g'" if $opt_g;


# Look for the Main config file
if( -r "/etc/lobm/" . $mainconf ){
    $mainconf = "/etc/lobm/" . $mainconf;
} elsif( -r ".." . "/etc/" . $mainconf ){
    $mainconf = ".." . "/etc/" . $mainconf;
} elsif( -r "." . "/" . $mainconf ){
    $mainconf = "." . "/" . $mainconf;
} else {
    print STDERR "Error: Master config file cannot be found\n";
    exit 1;
}
my $mainconf = LoadFile($mainconf);
#print Dumper( $mainconf );
my $workers = $mainconf->{workers};
chomp( $workers = `grep -c vendor_id /proc/cpuinfo` ) if ! $workers; # Match workers to the numbers of CPUs/threads
my $http_server_uri = $mainconf->{http_server_uri};
unless( $http_server_uri ) {
    say STDERR "Error: Please update the main configuration file with http_server_uri";
    exit 1;
}
my $http_served_from = $mainconf->{http_served_from};
$log->fatal_err( "You need to specify ".$log->quote('http_served_from')." in the main config file" ) if not $http_served_from;
my $baseline_dir = $mainconf->{baseline_dir};
$log->fatal_err( "You need to specify ".$log->quote('baseline_dir')." in the main config file" ) if not $baseline_dir;
my $company = $mainconf->{company};
my $createrepo_cmd = $mainconf->{createrepo_cmd};



# Load the baseline configuration file
my $bl_conf = LoadFile($opt_c);
my $max_versions = $bl_conf->{'versions'};
$max_versions = 1 if not $max_versions;
my $target = $bl_conf->{'target'};
$log->fatal_err( "You need to specify the target platform in the baseline file" ) if not $target;
my $type = $bl_conf->{'type'};
$type = 'yum' if not $type;
$log->fatal_err( "You need to specify the ".$log->quote('company')." name in the main config file" ) if not $company and $type eq "zypper";
$log->fatal_err( "You need to specify ".$log->quote('createrepo_cmd')." in the main config file" ) if not $createrepo_cmd and $type eq "yum";
my $os_release = $bl_conf->{'os_release'};
my $exclude = $bl_conf->{'exclude'};
my $include = $bl_conf->{'include'};
# Create the destination baseline directory
my $name = $bl_conf->{'name'};
$name =~ s/$date_format/$opt_o/g if $opt_o;
$log->fatal_err( "You need to specify the baseline name in the baseline file" ) if not $name;
$baseline_dir = $baseline_dir . "/" . $name;
remove_tree( $baseline_dir );
if( ! -d $baseline_dir ){
    my @paths = ( $baseline_dir."/RPMS/noarch", $baseline_dir."/RPMS/x86_64" );
    push @paths, $baseline_dir."/RPMS/i686" unless $exclude_32bit;
    if( ! make_path( @paths, {mode=>0755}) ){
        $log->fatal_err( "Could not create $baseline_dir: $!" );
    }
    #print "Successfully created ", $mainconf->{baseline_dir}, "\n";
}
if( ! -w $baseline_dir ){
    $log->fatal_err( "Cannot write to $baseline_dir: $!" );
}
my $zyppdate = POSIX::strftime('%Y%m%d%H%M%S', localtime);

# Write a record of how this baseline was created
write_record();

# find the source RPMs
my $rpm_dirs = $bl_conf->{'rpm_dirs'};
my @rpm_list;
$log->info_msg( "Finding the RPMs and setting up sym links");
for my $rpm_dir ( @$rpm_dirs ){
        my $date = $rpm_dir->{'date'};
        if( $date !~ /^\d{4,4}-\d\d-\d\d$/ ){
            print STDERR "Error: the date field for $rpm_dir must be in YYYY-MM-DD format!";
            exit 1;
        }
        $date = $opt_o if $opt_o;
        my $dir = $rpm_dir->{'dir'};
        my( $year, $mon, $mday ) = split( /-/, $date );
        my $reftime = timelocal(59,59,23,$mday,$mon - 1,$year);
        #print "$date $year, $mon, $mday $dir\n";
        $log->info_msg( "\tUsing RPMs in ".$log->quote($dir)." up till date: ".$log->quote($date));
        opendir DIR, $dir or die $!;
        #my @rpms = grep !/\.drpm$/, readdir( DIR );
        #my @rpms = grep /\.rpm$/, readdir( DIR );
        my @rpms;
        find( sub {/^.*\.rpm\z/s && push @rpms, $File::Find::name}, $dir );
        closedir DIR;
        OUTER: for my $rpm (@rpms ){
                #next unless $rpm =~ /avahi-ui/;
                next if( $rpm =~ /(\.src\.|\/boot\/|\.i\d86\.|\.drpm$|\.delta\.rpm$)/ and $exclude_32bit );
                next if( $rpm =~ /(\.src\.|\/boot\/|\.drpm$|\.delta\.rpm$)/ );
                my $mtime = (stat($rpm))[9];
                        #print $rpm, "\n";
                if( $reftime > $mtime ){
                        #print $mtime, " - $reftime\n";
                        my @arr = split( /-/, $rpm );
                        my $minor = pop @arr;
                        my $major = pop @arr;
                        my $pkg = join("-", @arr);
                        @arr = split( /\./, $minor );
                        my $ext = pop @arr;
                        pop @arr if $minor =~ /\.update\./;
                        my $arch = pop @arr;
                        #pop @arr if $minor =~ /\.el\d\./;
                        my $minor = join(".", @arr);
                        #print "$pkg : $major : $minor : $dir/$rpm\n";
                        my @tmp = ( basename($pkg), $major, $minor, $arch, $ext, $rpm );
                        # Include only applies if include array is populated
                        my $included = 0;
                        for my $incl ( @$include ){
                            #print "$incl eq ".basename($pkg)."\n";
                            $included = 1 and last if $incl eq basename($pkg);
                        }
                        next OUTER if( (not $included) and @$include > 0 );
                        for my $excl ( @$exclude ){
                            next OUTER if $excl eq basename($pkg);
                        }
                        push @rpm_list, \@tmp;
                }
        }
}

#print Dumper( @rpm_list );

my $strip_words;
$strip_words = 1 if( $target =~ /red.*hat|centos|rhel/i );

# Sort package names and major and minor numbers (numbers in reverse order)
@rpm_list = sort { sort_all() } @rpm_list;
#print Dumper( @rpm_list );

my ( $last_rpm, $last_maj, $last_min, $version );
for my $ar ( @rpm_list ){
    my $new_rpm = join( '.', $ar->[0], $ar->[3] );
    if( $last_rpm ne $new_rpm ){
        # reset versions counter
        $version = 1;
    }
    if( $version <= $max_versions ){
        # Construct the new filename
        mkdir $baseline_dir."/RPMS/".$ar->[3] if not -d $baseline_dir."/RPMS/".$ar->[3];
        my $newfile = $baseline_dir."/RPMS/".$ar->[3]."/".$ar->[0]."-".$ar->[1]."-".$ar->[2].".".$ar->[3].".".$ar->[4];
        
        # For Red Hat we can stay on a release if specified in the config file - skip release rpm if wrong version
        # If it is not specified, will default to latest release
        next if( $ar->[1] !~ /^$os_release/ and $ar->[0] =~ /^redhat-release-server/ );
        
        # Create the symbolic link, but skip if already exists - same rpm may have come from 2 sources
        #print $ar->[0], " ", $ar->[1], " ", $ar->[2], " ", $ar->[5], "\n";
        next if -e $newfile;
        if( ! symlink( $ar->[5], $newfile ) ){
            $log->fatal_err( "Cannot symbolic link, maybe RPM name does not follow convention: $!" );
        }
    }
    #print $ar->[0], " ", $last_maj, " ", $ar->[1], " ", $last_min, " ", $ar->[2], "\n" if $last_maj ne $ar->[1] and $last_rpm eq $new_rpm;
    $last_rpm = $new_rpm;
    $last_maj = $ar->[1];
    $last_min = $ar->[2];
    $version++;
}

# Create the repository
$log->info_msg( "Creating the repository in ".$log->quote($baseline_dir));
if( $type eq "zypper" ){
    # Create the content file
    open OUTFILE, ">$baseline_dir/content" or die $!;
    print OUTFILE <<FILE;
PRODUCT          openSUSE
VERSION 1.0-0
VENDOR openSUSE
LABEL openSUSE (SUSE LINUX 12.3)
ARCH.x86_64 x86_64 noarch
DEFAULTBASE x86_64
DESCRDIR setup/descr
DATADIR RPMS
FILE
    close OUTFILE;
    # Create the media file
    mkdir "$baseline_dir/media.1" or die $!;
    open OUTFILE, ">$baseline_dir/media.1/media" or die $!;
    print OUTFILE <<FILE;
$company
$zyppdate
1
FILE
    close OUTFILE;
    # Generate the package descriptions
    #`/usr/bin/create_package_descr -o "$bl_dir/setup/descr" -d "$bl_dir/RPMS"`;
    $log->fatal_err( "Could not run: ".$log->quote("/usr/bin/create_package_descr")." Do you have the ".$log->quote('inst-source-utils')." package installed?" ) if not -x "/usr/bin/create_package_descr";
    system( "/usr/bin/create_package_descr", "-o", "$baseline_dir/setup/descr", "-d", "$baseline_dir/RPMS");
    # Generate the checksums
    $log->fatal_err( "Could not run: ".$log->quote("/usr/bin/create_sha1sums")." Do you have the ".$log->quote('inst-source-utils')." package installed?" ) if not -x "/usr/bin/create_sha1sums";
    system( "/usr/bin/create_sha1sums", "-x", "-n", $baseline_dir);
    # Put a copy of the GPG public key used to sign the content file
    system("gpg", "--armor", "--output", $baseline_dir."/content.key", "--export", "-u", $gpg_key) if $opt_g;
    `echo "KEY SHA1 \$(sha1sum $baseline_dir/content.key | awk '{print \$1}') content.key" >> $baseline_dir/content`;
    # Sign the content file
    #`gpg --armor --detach-sign "$bl_dir/content"`;
    system("gpg", "--armor", "--detach-sign", $baseline_dir."/content") if $opt_g;
    # create a yast directory listing
    `ls -A1 $baseline_dir > $baseline_dir/directory.yast`;
    opendir DIR, "$baseline_dir" or die $!;
    open OUTFILE, ">$baseline_dir/directory.yast" or die $!;
    while( readdir DIR ){
        print OUTFILE $_."\n" if ! /^\.{1,2}$/;
    }
    closedir DIR;
    close OUTFILE;
} else {
    if( -x $createrepo_cmd ){
        my $output;
        $output = `$createrepo_cmd --workers=$workers $baseline_dir 2>&1`;
        my $rc = $? >> 8;
        #print $rc . ":- " . $output;
        $log->fatal_err( "The createrepo command failed with the following error:\n$output" ) if $rc;
    } else {
        $log->fatal_err( $log->quote($createrepo_cmd)." command could not be executed!" );
    }
}

my $url = "/" . $baseline_dir;
#say $url;
my $ss = $http_served_from;
#say $ss;
for( $url ){
    s/\/+/\//;
    s/^$ss//;
}
#say $url;
my $name = basename($url);
if( $target =~ /sles|suse/i ){
    say "\nUse this command to add the repository to client machines:\n";
    say "\tzypper ar -f -c -G $http_server_uri$url ".$name."\n";
} elsif( $target =~ /red.*hat|centos|rhel/i ){
    say "Create '/etc/yum.repos.d/".$name.".repo' on each client with this content:";
    (my $filecontent = qq{
        [$name]
        name=$bl_conf->{'description'}
        baseurl=$http_server_uri$url
        enabled=1
        gpgcheck=0
        sslverify=0
        }) =~ s/^ {8}//mg;
    print $filecontent;
} else {
    print "\tUnknown Target! Unknown command!\n\n";
}

####################### End of Main ############################################



################################################################################
#                                                                              #
# Function to create a record of how a baseline was created                    #
#                                                                              #
################################################################################

sub write_record {
    my $_32_bit = "no";
    $_32_bit = "yes" if $opt_i;
    my $filename = $baseline_dir."/history.txt";
    open FILE, ">$filename" or die $!;
    say FILE "This baseline was created with the following options:\n";
    say FILE "Date override: $opt_o\n";
    say FILE "32 bit as well: $_32_bit\n";
    say FILE "Baseline config:\n";
    say FILE Dump( $bl_conf );
}

################################################################################
#                                                                              #
# Function to intelligently find which rpm has the higher version              #
#                                                                              #
################################################################################
sub sort_all() {
    # got $a and $b automatically
    #print $_[0] . " <=> " . $_[1] . "\n";
    #say Dumper($a)." cmp ".Dumper($b);
    my $a0 = join('.', $a->[0], $a->[3] );
    my $b0 = join('.', $b->[0], $b->[3] );
    my $a1 = $a->[1];
    my $b1 = $b->[1];
    my $a2 = $a->[2];
    my $b2 = $b->[2];
    my $ans0 = $a0 cmp $b0;

    return $ans0 if $ans0; # name doesn't match


    # Versions need to be in reverse order as we want the latest first
    #my $ans1 = $b1 <=> $a1;
    my $ans1 = compare( $b1, $a1 );

    #say "$a0: $a1 cmp $b1, ans1: $ans1" if $ans1;
    return $ans1 if $ans1; # major number doesn't match

    # Process the minor number
    strip_words( \$a2 );
    strip_words( \$b2 );
    my $ans2 = compare( $b2, $a2 );
    #say "$a0 ($a1): $a2 cmp $b2, ans2: $ans2";

    return $ans2;
}
sub compare (){
    my $a = shift;
    my $b = shift;

    #return $a <=> $b;
    
    my @A = split( /\./, $a );
    my @B = split( /\./, $b );

    # Make the arrays the same size
    my $diff = @A - @B;
    my @tmp;
    for( my $i=0; $i <= abs($diff); $i++ ){
        push @tmp, "0";
    }
    if( $diff > 0 ){
        push @B, @tmp;
    } elsif( $diff < 0 ) {
        push @A, @tmp;
    }

    my ($A, $B);
    while (@A and @B) {
	    $A = shift @A;
	    $B = shift @B;
	    if ($A =~ /^\d+$/ and $B =~ /^\d+$/) {
            #say "numbers: ".$A . " <=> " . $B;
            # both only digits - remove leading zero to be safe
            $A =~ s/^0+//;
            $B =~ s/^0+//;
		    return $A <=> $B if $A <=> $B;
	    } else {
            #say "letters: ".$A . " cmp " . $B;
	        $A = uc $A;
	        $B = uc $B;
	        return $A cmp $B if $A cmp $B;
	    }	
    }
    # Fall through - everything matches
    #say "fall through";
    return 0;
}


################################################################################
#                                                                              #
# Function to strip extra words in the version strings for Centos and Red Hat  # 
#                                                                              #
################################################################################
sub strip_words {
    my $ref = shift;
    #my $i = 0;
    my $new = $$ref;
    if( $new =~ /el\d+/ ){
        if( $new =~ /el\d+_/ ){
            $new =~ s/el\d+_//g;
        } else {
            $new =~ s/el\d+/0/g;
        }
        $$ref = $new;
        #splice(@$ref,$i,1, ( $new ));
    }
        #$i++;
}
